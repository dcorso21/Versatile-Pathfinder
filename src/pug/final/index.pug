doctype html
head
    meta(charset='UTF-8')
    meta(name='viewport' content='width=device-width, initial-scale=1.0')
    title Pathfinder
    link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css' integrity='sha512-+4zCK9k+qNFUR5X+cKL9EIR+ZOhtIloNl9GIKS57V1MyNsYpYcUrUeQc9vNfzsWfV28IaLL3i96P9sdNyeRssA==' crossorigin='anonymous')
    link(rel='stylesheet' href='styles/main.css')

body
    img#starticon.starticon(src='imgs/start.png' alt='start-node' draggable='true')
    img#endicon.endicon(src='imgs/end.png' alt='end-node')
    .lay
        .menu
            .control-bar
                .begin-algo
                    i.fas.fa-play
                    btn Start
                .reset
                    i.fas.fa-undo-alt
                    btn Reset Solution
                .clear-walls
                    i.fas.fa-cube
                    btn Clear Walls

            .pick-algo
                fieldset
                    legend Pick Algorithm &nbsp;
                    select#algo-select.btn
                        option(value='dijkstras') Dijkstras
                        option(value='astar') A *
                        option(value='dfSearch') Depth First Search
                        option(value='greedy') Greedy
            .algo-description
                .dijkstras.algo-desc.
                    Dijkstras is the simplest of the sorting algorithms. It will visit each node
                    in the order in which they are found to be adjacent to the already visited.
                    Dijkstras algorithm is seen as a standard in pathfinding, but can be slow with larger areas to scan.
                    This algorithm does guarantee the shortest path.
                .astar.algo-desc.
                    A* is an algorithm that looks at number of steps taken, 
                    and the euclidean distance from the current cell to the destination. 
                    It creates a value from the sum of these two factors that it 
                    refers to as #[em f]. A* Does guarantee the shortest path and is often credited as 
                    the most efficent way to do so.
                .greedy.algo-desc.
                    Greedy is an algorithm that looks at number of steps taken, 
                    and the euclidean distance from the current cell to the destination. 
                    Like A*, it creates a value from the sum of these two factors that it 
                    refers to as #[em f]. However the distance is highly prioritized 
                    over the steps taken, causing the algorithm to lurch forward "greedily". 
                    Greedy does NOT guarantee the shortest path.
                .dfSearch.algo-desc.
                    Depth First Search is an algorithm that always chooses a new neighbor 
                    as opposed to those which have waiting in the queue to be visited. It does not 
                    take into account where the end node is and will meander until it stumbles across it.
                    As the visualizer will show, this algorithm, while useful in other applications, 
                    is not optimal for pathfinding and does NOT guarantee the shortest path.

            a(href="pseudoCode.html") 
                span View Pseudo-Code 
                i.fas.fa-angle-double-right

        .grid
    //- <div>Icons made by <a href="https://www.flaticon.com/authors/pixel-perfect" title="Pixel perfect">Pixel perfect</a> from <a href="https://www.flaticon.com/" title="Flaticon">www.flaticon.com</a></div>


    script(src='js/main.js')
    script(src='js/solver.js')
